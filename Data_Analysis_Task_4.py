# -*- coding: utf-8 -*-
"""Task4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Go9ZiMXHoD40-6RuparThUX0fF12aC0n
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

pd.set_option('display.max_columns',100)
pd.set_option('display.max_rows',50000)

data=pd.read_csv('USvideos.csv')

plt.style.use('ggplot')

data.shape

data.head()

data.columns

data.info()

df=data.drop(['description','thumbnail_link'],axis=1)
df.head(3)

df.isnull().sum()

from datetime import datetime
import datetime

df['trending_date'] = df['trending_date'].astype(str).apply(lambda x : datetime.datetime.strptime(x, '%y.%d.%m'))
df.head()

df['publish_time'] = pd.to_datetime(df['publish_time'])
df.head(2)

df['publish_month'] = df['publish_time'].dt.month
df['publish_day'] = df['publish_time'].dt.day
df['publish_year']=df['publish_time'].dt.year
df.head(2)

df['likes']=pd.to_numeric(df['likes'], errors='coerce').astype(int)
df['dislikes']=pd.to_numeric(df['dislikes'], errors='coerce').astype(int)
df['comment_count']=pd.to_numeric(df['comment_count'], errors='coerce').astype(int)
df['views']=pd.to_numeric(df['views'], errors='coerce').astype(int)
df['video_error_or_removed']=pd.to_numeric(df['video_error_or_removed'], errors='coerce').astype(int)

print(sorted(data['category_id'].unique()))

df['category_name'] = np.nan
df.loc[data['category_id'] == 1, 'category_name'] = 'Film and Animation'
df.loc[data['category_id'] == 2, 'category_name'] = 'Autos and Vehicles'
df.loc[data['category_id'] == 10, 'category_name'] = 'Music'
df.loc[data['category_id'] == 15, 'category_name'] = 'Pets and Animals'
df.loc[data['category_id'] == 17, 'category_name'] = 'Sports'
df.loc[data['category_id'] == 19, 'category_name'] = 'Travel and Events'
df.loc[data['category_id'] == 20, 'category_name'] = 'Gaming'
df.loc[data['category_id'] == 22, 'category_name'] = 'People and Blogs'
df.loc[data['category_id'] == 23, 'category_name'] = 'Comedy'
df.loc[data['category_id'] == 24, 'category_name'] = 'Entertainment'
df.loc[data['category_id'] == 25, 'category_name'] = 'News and Politics'
df.loc[data['category_id'] == 26, 'category_name'] = 'How to and Style'
df.loc[data['category_id'] == 27, 'category_name'] = 'Education'
df.loc[data['category_id'] == 28, 'category_name'] = 'Science and Technology'
df.loc[data['category_id'] == 29, 'category_name'] = 'Non Profits and Activism'
df.loc[data['category_id'] == 30, 'category_name'] = 'Movies'
df.loc[data['category_id'] == 43, 'category_name'] = 'Shows'
df.head()

df.tags = df.tags.str.strip('|').str.replace('"','').str.lower()
df.head()

plt.figure(figsize=(6,3))
plt.hist(df['publish_month'], bins=23, color='#B55D6A')
plt.title('Popular Months to publish videos', fontsize=12)
plt.xlabel('Month', fontsize=10)
plt.ylabel('Number of videos', fontsize=10)
plt.xticks(range(1,13),['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'])
plt.show()

plt.figure(figsize=(17,5))
sns.kdeplot(df['publish_day'], color='#377B7E')
plt.title("Most probable day of the month to publish videos")
plt.xlabel('Date')
plt.xticks(range(1,32))
plt.show()

plt.figure(figsize=(5,3))
plt.plot(df['trending_date'], color='#96784B')
plt.title("Trending statistics of videos", fontsize=11)
plt.ylabel('Trending times',fontsize=10)
plt.xlabel('Number of videos',fontsize=10)
plt.show()

import matplotlib.ticker as ticker
plt.figure(figsize=(10,7))
sns.barplot(x='views',y='category_name',data=df,hue='ratings_disabled',palette='viridis' )
plt.title('Views by category', fontsize=12)
ax = plt.gca()
ax.xaxis.set_major_formatter(ticker.FuncFormatter(lambda x, pos: '{:,.0f}'.format(x)))
plt.legend(title='Ratings Disabled')
plt.xlabel('Views')
plt.ylabel('Categories')
plt.show()

plt.figure(figsize=(5,4))
correlation = df[['likes', 'comment_count', 'views']].corr()
sns.heatmap(correlation, annot=True, cmap='Pastel2')
plt.show()

plt.figure(figsize=(8,4))
sns.scatterplot(x='comment_count',y='likes',hue='dislikes',data=df, palette='plasma')
ax = plt.gca()
ax.yaxis.set_major_formatter(ticker.FuncFormatter(lambda x, pos: '{:,.0f}'.format(x)))
ax.xaxis.set_major_formatter(ticker.FuncFormatter(lambda x, pos: '{:,.0f}'.format(x)))
plt.xlabel('Comment Count')
plt.ylabel('Dislikes Count')
plt.title('Likes/Dislikes vs Comment Count')
plt.legend(title='Dislikes')
plt.show()

df.groupby('category_name')['comments_disabled'].sum().sort_values(ascending=False).plot(kind='bar', figsize=(6,4), cmap='PRGn')
plt.title('Comments disabled by Category', fontsize=12)
plt.xlabel('Categories')
plt.ylabel('Number of videos')
plt.show()

df['publish_year'].value_counts()

df.groupby('channel_title')['views'].max().sort_values(ascending=False).head(1)

